// Import necessary Firebase modules
import { initializeApp } from "firebase/app";
import { getFirestore, collection, query, where, getDocs } from "firebase/firestore";
import { 
  getAuth, 
  createUserWithEmailAndPassword,
  sendEmailVerification as sendVerificationEmail,
  signInWithEmailAndPassword as signInWithEmail,
  signOut, 
  sendPasswordResetEmail
} from "firebase/auth";

// Your Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyBi6G6VZZZZT4VqTTQ6DyK2ugr89qxLmBc",
  authDomain: "woclif.firebaseapp.com",
  projectId: "woclif",
  storageBucket: "woclif.appspot.com",
  messagingSenderId: "982842036655",
  appId: "1:982842036655:web:8020afb3396e5572fa1f5a",
  measurementId: "G-858H7E09HE"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// Function to sign up with email and password
export const signUpWithEmailAndPassword = async (email, password) => {
  try {
    if (!/\S+@\S+\.\S+/.test(email)) {
      throw new Error("Invalid email format.");
    }

    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    return userCredential.user;
  } catch (error) {
    console.error("Error signing up:", error.message);
    throw error;
  }
};



// Function to send email verification
export const sendEmailVerification = async () => {
  try {
    const user = auth.currentUser;
    if (user) {
      await sendVerificationEmail(user);
    } else {
      throw new Error("No user found. Please sign in again.");
    }
  } catch (error) {
    console.error("Error sending email verification:", error.message);
    throw error;
  }
};

// Function to sign in with email and password
export const signInWithEmailAndPassword = async (email, password) => {
  try {
    const userCredential = await signInWithEmail(auth, email, password);
    return userCredential.user;
  } catch (error) {
    console.error("Error signing in:", error.message);
    throw error;
  }
};

// Function to check if email is verified
export const checkIfEmailVerified = async (email) => {
  try {
    const q = query(collection(db, "users"), where("email", "==", email));
    const querySnapshot = await getDocs(q);
    const userRecord = querySnapshot.docs[0]?.data();

    if (!userRecord) {
      throw new Error("User not found.");
    }

    return userRecord.emailVerified;
  } catch (error) {
    console.error("Error checking email verification:", error.message);
    throw error;
  }
};

// Function to reset password
export const resetPassword = async (email) => {
  try {
    await sendPasswordResetEmail(auth, email);
  } catch (error) {
    console.error("Error resetting password:", error.message);
    throw error;
  }
};

// Function to check if user exists
export const checkIfUserExists = async (email) => {
  try {
    const q = query(collection(db, "users"), where("email", "==", email));
    const querySnapshot = await getDocs(q);
    return !querySnapshot.empty; // Return true if user exists
  } catch (error) {
    console.error("Error checking user existence:", error.message);
    throw error;
  }
};

// Function to sign out user
export const signOutUser = async () => {
  try {
    await signOut(auth);
  } catch (error) {
    console.error("Error signing out:", error.message);
    throw error;
  }
};

export { auth };
