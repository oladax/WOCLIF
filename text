// Import necessary Firebase modules
import { initializeApp } from "firebase/app";
import { getFirestore, collection, query, where, getDocs } from "firebase/firestore";
import { 
  getAuth, 
  createUserWithEmailAndPassword, 
  signInWithEmailAndPassword as firebaseSignIn, 
  onAuthStateChanged, 
  signOut, 
  GoogleAuthProvider, 
  signInWithPopup, 
  sendPasswordResetEmail,
  sendEmailVerification
} from "firebase/auth";

// Your Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyBi6G6VZZZZT4VqTTQ6DyK2ugr89qxLmBc",
  authDomain: "woclif.firebaseapp.com",
  projectId: "woclif",
  storageBucket: "woclif.appspot.com",
  messagingSenderId: "982842036655",
  appId: "1:982842036655:web:8020afb3396e5572fa1f5a",
  measurementId: "G-858H7E09HE"
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

let currentUser = null; // Store the current signed-in user

const checkIfUserExists = async (email) => {
  try {
    const usersRef = collection(db, "users");
    const q = query(usersRef, where("email", "==", email));
    const querySnapshot = await getDocs(q);
    return querySnapshot.size > 0;
  } catch (error) {
    console.error("Error checking if user exists:", error.message);
    throw error;
  }
};

const checkIfEmailVerified = async (email) => {
  const user = auth.currentUser;
  if (user) {
    await user.reload();
    return user.email === email && user.emailVerified;
  } else {
    return false;
  }
};

const signUpWithEmailAndPassword = async (email, password) => {
  try {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    currentUser = userCredential.user;
    await sendEmailVerification(currentUser);
    console.log("User signed up:", currentUser);
  } catch (error) {
    console.error("Error signing up:", error.message);
    throw error;
  }
};

const signInWithEmailAndPassword = async (email, password) => {
  try {
    const userCredential = await firebaseSignIn(auth, email, password);
    currentUser = userCredential.user;
    console.log("User signed in:", currentUser);
  } catch (error) {
    console.error("Error signing in:", error.message);
    throw error;
  }
};

const signInWithGoogle = async () => {
  const provider = new GoogleAuthProvider();
  try {
    const result = await signInWithPopup(auth, provider);
    currentUser = result.user;
    console.log("User signed in with Google:", currentUser);
  } catch (error) {
    console.error("Error signing in with Google:", error.message);
    throw error;
  }
};

const resetPassword = async (email) => {
  try {
    await sendPasswordResetEmail(auth, email);
  } catch (error) {
    console.error("Error resetting password:", error.message);
    throw error;
  }
};

const signOutUser = async () => {
  try {
    await signOut(auth);
    currentUser = null;
    console.log("User signed out");
  } catch (error) {
    console.error("Error signing out:", error.message);
  }
};

const checkAuthState = () => {
  onAuthStateChanged(auth, (user) => {
    if (user) {
      currentUser = user;
      console.log("User is signed in:", user);
    } else {
      currentUser = null;
      console.log("User is signed out");
    }
  });
};

const getCurrentUser = () => {
  return currentUser;
};

checkAuthState(); // Initialize auth state checking

export {
  auth,
  signUpWithEmailAndPassword,
  signInWithEmailAndPassword,
  signInWithGoogle,
  signOutUser,
  checkAuthState,
  resetPassword,
  checkIfEmailVerified,
  getCurrentUser,
  checkIfUserExists
};
